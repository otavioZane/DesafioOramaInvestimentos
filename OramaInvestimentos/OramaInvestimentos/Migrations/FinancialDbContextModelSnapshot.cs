// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OramaInvestimentos.Data.Db.Repository;

#nullable disable

namespace OramaInvestimentos.Migrations
{
    [DbContext(typeof(FinancialDbContext))]
    partial class FinancialDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OramaInvestimentos.Data.Entities.BankAccount", b =>
                {
                    b.Property<long>("accountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("accountID"));

                    b.Property<decimal>("balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DECIMAL")
                        .HasDefaultValue(10000m);

                    b.Property<long>("customerID")
                        .HasColumnType("BIGINT");

                    b.HasKey("accountID");

                    b.HasIndex("customerID")
                        .IsUnique();

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("OramaInvestimentos.Data.Entities.Customer", b =>
                {
                    b.Property<long>("customerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("customerID"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.HasKey("customerID");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("OramaInvestimentos.Data.Entities.FinancialAsset", b =>
                {
                    b.Property<long>("assetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("price")
                        .HasColumnType("DECIMAL");

                    b.HasKey("assetID");

                    b.ToTable("FinancialAssets");
                });

            modelBuilder.Entity("OramaInvestimentos.Data.Entities.FinancialTransaction", b =>
                {
                    b.Property<long>("transactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("transactionID"));

                    b.Property<long>("accountID")
                        .HasColumnType("BIGINT");

                    b.Property<int>("assetID")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("quantity")
                        .HasColumnType("DECIMAL");

                    b.Property<decimal>("totalValue")
                        .HasColumnType("DECIMAL");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("VARCHAR");

                    b.HasKey("transactionID");

                    b.HasIndex("accountID");

                    b.ToTable("FinancialTransactions");
                });

            modelBuilder.Entity("OramaInvestimentos.Data.Entities.BankAccount", b =>
                {
                    b.HasOne("OramaInvestimentos.Data.Entities.Customer", "customer")
                        .WithOne("bankAccount")
                        .HasForeignKey("OramaInvestimentos.Data.Entities.BankAccount", "customerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("OramaInvestimentos.Data.Entities.FinancialAsset", b =>
                {
                    b.HasOne("OramaInvestimentos.Data.Entities.FinancialTransaction", "transaction")
                        .WithOne("financialAsset")
                        .HasForeignKey("OramaInvestimentos.Data.Entities.FinancialAsset", "assetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("transaction");
                });

            modelBuilder.Entity("OramaInvestimentos.Data.Entities.FinancialTransaction", b =>
                {
                    b.HasOne("OramaInvestimentos.Data.Entities.BankAccount", "bankAccount")
                        .WithMany("transactions")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("bankAccount");
                });

            modelBuilder.Entity("OramaInvestimentos.Data.Entities.BankAccount", b =>
                {
                    b.Navigation("transactions");
                });

            modelBuilder.Entity("OramaInvestimentos.Data.Entities.Customer", b =>
                {
                    b.Navigation("bankAccount")
                        .IsRequired();
                });

            modelBuilder.Entity("OramaInvestimentos.Data.Entities.FinancialTransaction", b =>
                {
                    b.Navigation("financialAsset")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
