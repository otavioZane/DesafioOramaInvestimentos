// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OramaInvestimentos.Data.Db.Repository;

#nullable disable

namespace OramaInvestimentos.Migrations
{
    [DbContext(typeof(FinancialDbContext))]
    [Migration("20230831211603_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OramaInvestimentos.Data.Entities.BankAccountParam", b =>
                {
                    b.Property<long>("accountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("accountID"));

                    b.Property<decimal>("balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DECIMAL")
                        .HasDefaultValue(90000m);

                    b.Property<long>("customerID")
                        .HasColumnType("BIGINT");

                    b.HasKey("accountID");

                    b.HasIndex("customerID")
                        .IsUnique();

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("OramaInvestimentos.Data.Entities.CustomerParam", b =>
                {
                    b.Property<long>("customerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("customerID"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.HasKey("customerID");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("OramaInvestimentos.Data.Entities.FinancialAssetParam", b =>
                {
                    b.Property<long>("assetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("assetID"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("price")
                        .HasColumnType("DECIMAL");

                    b.HasKey("assetID");

                    b.ToTable("FinancialAssets");

                    b.HasData(
                        new
                        {
                            assetID = 1L,
                            name = "ABC Stock",
                            price = 100m
                        },
                        new
                        {
                            assetID = 2L,
                            name = "DEF Stock",
                            price = 100m
                        },
                        new
                        {
                            assetID = 3L,
                            name = "GHI Stock",
                            price = 100m
                        },
                        new
                        {
                            assetID = 4L,
                            name = "JKL Stock",
                            price = 100m
                        },
                        new
                        {
                            assetID = 5L,
                            name = "MNO Stock",
                            price = 100m
                        },
                        new
                        {
                            assetID = 6L,
                            name = "PQR Stock",
                            price = 100m
                        },
                        new
                        {
                            assetID = 7L,
                            name = "STU Stock",
                            price = 100m
                        },
                        new
                        {
                            assetID = 8L,
                            name = "VWX Stock",
                            price = 100m
                        },
                        new
                        {
                            assetID = 9L,
                            name = "YZA Stock",
                            price = 100m
                        },
                        new
                        {
                            assetID = 10L,
                            name = "BCD Stock",
                            price = 100m
                        });
                });

            modelBuilder.Entity("OramaInvestimentos.Data.Entities.FinancialTransactionParam", b =>
                {
                    b.Property<long?>("transactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("transactionID"));

                    b.Property<long>("accountID")
                        .HasColumnType("BIGINT");

                    b.Property<long>("assetID")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("quantity")
                        .HasColumnType("DECIMAL");

                    b.Property<decimal>("totalValue")
                        .HasColumnType("DECIMAL");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("VARCHAR");

                    b.HasKey("transactionID");

                    b.HasIndex("accountID");

                    b.HasIndex("assetID");

                    b.ToTable("FinancialTransactions");
                });

            modelBuilder.Entity("OramaInvestimentos.Data.Entities.BankAccountParam", b =>
                {
                    b.HasOne("OramaInvestimentos.Data.Entities.CustomerParam", "customer")
                        .WithOne("bankAccount")
                        .HasForeignKey("OramaInvestimentos.Data.Entities.BankAccountParam", "customerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("OramaInvestimentos.Data.Entities.FinancialTransactionParam", b =>
                {
                    b.HasOne("OramaInvestimentos.Data.Entities.BankAccountParam", "bankAccount")
                        .WithMany("transactions")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OramaInvestimentos.Data.Entities.FinancialAssetParam", "financialAsset")
                        .WithMany("transactions")
                        .HasForeignKey("assetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("bankAccount");

                    b.Navigation("financialAsset");
                });

            modelBuilder.Entity("OramaInvestimentos.Data.Entities.BankAccountParam", b =>
                {
                    b.Navigation("transactions");
                });

            modelBuilder.Entity("OramaInvestimentos.Data.Entities.CustomerParam", b =>
                {
                    b.Navigation("bankAccount")
                        .IsRequired();
                });

            modelBuilder.Entity("OramaInvestimentos.Data.Entities.FinancialAssetParam", b =>
                {
                    b.Navigation("transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
